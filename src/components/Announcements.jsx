import React, { useEffect, useState } from "react";
import { Helmet } from "react-helmet-async";
import AOS from "aos";
import "aos/dist/aos.css";
import CircularProgress from "@mui/material/CircularProgress";
import { Download } from "lucide-react";
import jsPDF from "jspdf";

const SERVER_URL = process.env.REACT_APP_SERVER_URL;

function Announcements() {
  const [searchTerm, setSearchTerm] = useState("");
  const [announcements, setAnnouncements] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    AOS.init({ duration: 1000 });

    const fetchAnnouncements = async () => {
      try {
        const response = await fetch(`${SERVER_URL}/api/announcements`);
        if (!response.ok) throw new Error("Failed to fetch announcements");
        const data = await response.json();
        setAnnouncements(data);
      } catch (error) {
        setError(error.message);
      } finally {
        setLoading(false);
      }
    };

    fetchAnnouncements();
  }, []);

  const filteredAnnouncements = announcements.filter(
    (item) =>
      item.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      item.description.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const handleDownloadAllPDF = () => {
    const pdf = new jsPDF("p", "mm", "a4");
    let y = 60;
    const pageHeight = pdf.internal.pageSize.height;

    // === Logo ===
    const logoUrl = "/eusda-logo.png"; // âœ… Put logo in /public/
    pdf.addImage(logoUrl, "PNG", 90, 10, 30, 30);

    // === Title ===
    pdf.setFont("helvetica", "bold");
    pdf.setFontSize(18);
    pdf.setTextColor(0, 0, 0);
    pdf.text("EUSDA Announcements", 105, 50, { align: "center" });
    pdf.setDrawColor(0, 150, 0);
    pdf.line(60, 53, 150, 53);

    // === Announcements ===
    filteredAnnouncements.forEach((a, i) => {
      if (y > pageHeight - 50) {
        pdf.addPage();
        y = 20;
      }
      pdf.setFont("helvetica", "bold");
      pdf.setFontSize(13);
      pdf.text(`${i + 1}. ${a.title}`, 14, y);
      y += 7;

      pdf.setFont("helvetica", "italic");
      pdf.setFontSize(11);
      pdf.text(`${new Date(a.date).toLocaleString()}`, 14, y);
      y += 6;

      pdf.setFont("helvetica", "normal");
      pdf.setFontSize(11);
      const splitDesc = pdf.splitTextToSize(a.description, 180);
      pdf.text(splitDesc, 14, y);
      y += splitDesc.length * 6 + 6;

      pdf.setDrawColor(200);
      pdf.line(14, y, 196, y);
      y += 8;
    });

    // === Footer + Pagination ===
    const totalPages = pdf.internal.getNumberOfPages();
    for (let i = 1; i <= totalPages; i++) {
      pdf.setPage(i);
      pdf.setDrawColor(0, 150, 0);
      pdf.setLineWidth(0.5);
      pdf.line(14, pageHeight - 20, 196, pageHeight - 20);

      pdf.setFont("helvetica", "italic");
      pdf.setFontSize(10);
      pdf.setTextColor(120);
      pdf.text(
        `Generated by EUSDA Church System â€” ${new Date().toLocaleDateString()}`,
        105,
        pageHeight - 12,
        { align: "center" }
      );
      pdf.text(`Page ${i} of ${totalPages}`, 196, pageHeight - 12, {
        align: "right",
      });
    }

    pdf.save("church_announcements.pdf");
  };

  return (
    <section className="bg-green-50 py-20 px-6 min-h-screen md:mt-20 mt-8">
      {/* âœ… Helmet SEO */}
      <Helmet>
        <title>Announcements | EUSDA Church Kenya</title>
        <meta
          name="description"
          content="Stay updated with the latest announcements from Egerton University SDA Church. Download official notices and keep track of upcoming events and activities."
        />
        <meta
          name="keywords"
          content="EUSDA announcements, SDA Kenya news, church updates, Egerton University Seventh-day Adventist announcements, upcoming events"
        />
        <link rel="canonical" href="https://eusda.co.ke/announcements" />

        {/* Open Graph */}
        <meta property="og:title" content="Church Announcements | EUSDA" />
        <meta
          property="og:description"
          content="Stay informed with the latest announcements and updates from Egerton University SDA Church."
        />
        <meta property="og:url" content="https://eusda.co.ke/announcements" />
        <meta
          property="og:image"
          content="https://eusda.co.ke/eusda-logo.png"
        />
        <meta property="og:type" content="website" />

        {/* Twitter */}
        <meta name="twitter:card" content="summary_large_image" />
        <meta name="twitter:title" content="Church Announcements | EUSDA" />
        <meta
          name="twitter:description"
          content="Latest announcements and updates from EUSDA Church Kenya."
        />
        <meta
          name="twitter:image"
          content="https://eusda.co.ke/eusda-logo.png"
        />

        {/* Schema.org JSON-LD */}
        <script type="application/ld+json">
          {JSON.stringify({
            "@context": "https://schema.org",
            "@type": "NewsArticle",
            headline: "Church Announcements - EUSDA",
            description:
              "Official announcements and updates from Egerton University SDA Church.",
            url: "https://eusda.co.ke/announcements",
            publisher: {
              "@type": "Organization",
              name: "EUSDA Church",
              url: "https://eusda.co.ke",
            },
          })}
        </script>
      </Helmet>

      <div className="max-w-6xl mx-auto" data-aos="fade-up">
        {/* Header */}
        <div className="flex items-center justify-between mb-10">
          <h1 className="text-4xl font-bold text-green-900 text-center w-full">
            ðŸ“¢ Church Announcements
          </h1>
        </div>

        {/* Search + Download */}
        <div className="flex flex-col sm:flex-row items-center justify-between gap-4 mb-10 max-w-4xl mx-auto">
          <input
            type="text"
            placeholder="Search announcements..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-full sm:w-2/3 px-4 py-2 border border-green-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-green-500"
          />
          {filteredAnnouncements.length > 0 && (
            <button
              onClick={handleDownloadAllPDF}
              className="w-1/2 sm:w-auto bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-xl flex items-center gap-2 shadow text-center"
            >
              <Download size={18} />
              Download All (PDF)
            </button>
          )}
        </div>

        {/* Loader */}
        {loading && (
          <div className="flex justify-center items-center py-10">
            <CircularProgress color="success" size={60} />
          </div>
        )}

        {/* Error */}
        {error && (
          <p className="text-center text-red-600 font-semibold bg-red-100 p-4 rounded-lg shadow-md mt-6">
            Error: {error}
          </p>
        )}

        {/* Announcement Cards */}
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-2 gap-8">
          {filteredAnnouncements.length > 0 ? (
            filteredAnnouncements.map((announcement, index) => (
              <div
                key={index}
                className="relative bg-white rounded-2xl shadow-xl p-6 border-l-4 border-green-600"
              >
                <h2 className="text-xl font-bold text-green-800 mb-2">
                  {announcement.title}
                </h2>
                <p className="text-gray-500 text-sm mb-3">
                  {new Date(announcement.date).toLocaleString()}
                </p>
                <p className="text-gray-700 whitespace-pre-line">
                  {announcement.description}
                </p>
              </div>
            ))
          ) : (
            <p className="text-center text-gray-500 font-semibold text-lg bg-gray-100 p-4 rounded-lg shadow-md mt-6 flex items-center justify-center">
              No announcements found.
            </p>
          )}
        </div>
      </div>
    </section>
  );
}

export default Announcements;
